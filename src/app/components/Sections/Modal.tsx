import { Dialog, Transition } from "@headlessui/react";
import { Fragment, Suspense, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from "next/image";
import Link from "next/link";
import Vote from "../Vote";
import { BsBackspaceFill } from "react-icons/bs";
import Trailer from "../Trailers/Trailer";

// Generated by https://quicktype.io

export interface Modal {
  adult: boolean;
  backdrop_path: string;
  belongs_to_collection: BelongsToCollection;
  budget: number;
  genres: Genre[];
  homepage: string;
  id: number;
  imdb_id: string;
  original_language: string;
  original_title: string;
  overview: string;
  popularity: number;
  poster_path: string;
  production_companies: ProductionCompany[];
  production_countries: ProductionCountry[];
  release_date: string;
  revenue: number;
  runtime: number;
  spoken_languages: SpokenLanguage[];
  status: string;
  tagline: string;
  title: string;
  video: boolean;
  vote_average: number;
  vote_count: number;
}

export interface BelongsToCollection {
  id: number;
  name: string;
  poster_path: null;
  backdrop_path: null;
}

export interface Genre {
  id: number;
  name: string;
}

export interface ProductionCompany {
  id: number;
  logo_path: null | string;
  name: string;
  origin_country: string;
}

export interface ProductionCountry {
  iso_3166_1: string;
  name: string;
}

export interface SpokenLanguage {
  english_name: string;
  iso_639_1: string;
  name: string;
}

const useModal = () => {
  const [isOpen, setIsOpen] = useState(false);

  function closeModal() {
    setIsOpen(false);
  }

  function openModal() {
    setIsOpen(true);
  }

  return { isOpen, closeModal, openModal };
};

const fetchDialog = async (id: number) => {
  const options = {
    method: "GET",
    headers: {
      accept: "application/json",
      Authorization:process.env.NEXT_PUBLIC_MOVIE_KEY as string,
    },
  };

  const response = await fetch(
    `https://api.themoviedb.org/3/movie/${id}`,
    options
  );
  const data = await response.json();

  return data as Modal;
};

export default function MyModal({ id }: { id: number }) {
  const { isOpen, closeModal, openModal } = useModal();
  const { data, isLoading, isError } = useQuery(["Modal", id], () =>
    fetchDialog(id)
  );

  if (isLoading) {
    return (
      <div className="flex justify-center bg-black items-center mx-auto">
        <h1 className="text-white text-2xl font-bold absolute inset-0 flex items-center justify-center">
          Loading...
        </h1>
      </div>
    );
  }

  if (isError) {
    return <div>Error al cargar Imagen</div>;
  }

  return (
    <div>
      <div className="">
        <div
          onClick={openModal}
          className="text-md px-3 font-medium text-white "
        >
          Detail
        </div>
      </div>

      {data && (
        <div key={`Mov-${data.id}`}>
          <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
              <div className="fixed inset-0 bg-black/70" aria-hidden="true" />
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="fixed inset-0 bg-black bg-opacity-25" />
              </Transition.Child>

              <div className="fixed inset-0 overflow-y-auto">
                <div className="flex min-h-full items-center justify-center p-4 text-center">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 scale-95"
                    enterTo="opacity-100 scale-100"
                    leave="ease-in duration-300"
                    leaveFrom="opacity-100 scale-100"
                    leaveTo="opacity-0 scale-95"
                  >
                    <Dialog.Panel className=" w-full lg:w-[900px] border-2 border-zinc-500 transform overflow-hidden rounded-2xl bg-black  text-left align-middle shadow-xl transition-all">
                      <div className="flex">
                        <div className="p-4">
                          <div
                            className="inline-flex justify-center rounded-md border border-transparent text-sm font-medium   focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2"
                            onClick={closeModal}
                          >
                            <BsBackspaceFill className="text-2xl text-red-300" />
                          </div>
                          <Dialog.Title
                            as="h3"
                            className="text-xl text-center font-medium leading-6 text-gray-100 underline underline-offset-3"
                          >
                            {data.title}
                          </Dialog.Title>
                          <div className="mt-2 flex justify-center mx-auto w-full md:w-[380px]">
                            <p className="text-md text-center text-gray-200">
                              {data.overview}
                            </p>
                          </div>

                          <div className="mt-2">
                            <div className="flex flex-wrap justify-center gap-4">
                              {data?.genres?.map((genre) => (
                                <div key={genre.id}>
                                  <span className="text-md text-gray-400">
                                    | {genre.name}
                                  </span>
                                </div>
                              ))}
                            </div>

                            <div className="flex justify-center items-center gap-4 mt-4">
                              <Link
                                href={data.homepage}
                                passHref
                                target="_blank"
                                className="text-md flex justify-center text-gray-300 hover:text-gray-100 focus:outline-none"
                              >
                                <span className="inline-flex cursor-pointer items-center justify-center rounded-full border border-slate-800 bg-black px-3 py-1 text-md font-medium text-slate-300 backdrop-blur-3xl">
                                  <span className="bg-gradient-to-t from-[#fff] to-[#8678f9] bg-clip-text text-transparent">
                                    Official Movie Page
                                  </span>
                                </span>
                              </Link>

                              <span className="inline-flex cursor-pointer items-center justify-center rounded-full border border-slate-800 bg-black px-3 py-1 text-md font-medium text-slate-300 backdrop-blur-3xl">
                                <span className="bg-gradient-to-t from-[#fff] to-[#8678f9] bg-clip-text text-transparent">
                                  <Trailer id={id ?? 0} />
                                </span>
                              </span>
                            </div>

                            <Vote vote_average={data.vote_average} />

                            <div className="mt-2 flex-col justify-center mx-auto">
                              <h1 className="text-md text-gray-400">
                                Original Languaje:{" "}
                                <span className="text-white text-lg">
                                  {data.original_language}
                                </span>
                              </h1>
                              <h1 className="text-md text-gray-400">
                                Release Date:{" "}
                                <span className="text-white text-lg">
                                  {data.release_date}
                                </span>
                              </h1>
                              <h1 className="text-md text-gray-400">
                                Runtime:{" "}
                                <span className="text-white text-lg">
                                  {data.runtime} min
                                </span>
                              </h1>

                              <h1 className="text-md text-gray-400">
                                Status:{" "}
                                <span className="text-white text-lg">
                                  {data.status}
                                </span>
                              </h1>

                              <h1 className="text-md text-gray-400">
                                Production Companies:{" "}
                                <span className="text-white text-lg">
                                  {data.production_companies?.map((company) => (
                                    <div className="grid" key={company.id}>
                                      <span className="text-white text-lg">
                                        - {company.name}
                                      </span>
                                    </div>
                                  ))}
                                </span>
                              </h1>

                              <h1 className="text-md text-gray-400">
                                Production Countries:{" "}
                                <span className="text-white text-lg">
                                  {data.production_countries?.map((country) => (
                                    <div
                                      className="grid"
                                      key={country.iso_3166_1}
                                    >
                                      <span className="text-white text-lg">
                                        - {country.name}
                                      </span>
                                    </div>
                                  ))}
                                </span>
                              </h1>
                            </div>
                          </div>
                        </div>
                        
                          <div>
                            {data?.poster_path !== null ? (
                              <Image
                                src={`https://image.tmdb.org/t/p/w500${data.poster_path}`}
                                alt={data.title}
                                width={500}
                                height={500}
                                className="rounded-tr-lg hidden md:flex h-full rounded-br-lg"
                              />
                            ) : (
                              <Image
                                src="/no-image.png"
                                alt="No Image"
                                width={500}
                                height={500}
                                className="rounded-tr-lg hidden md:flex h-full rounded-br-lg"
                              />
                            )}
                          </div>
                        
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </div>
            </Dialog>
          </Transition>
        </div>
      )}
    </div>
  );
}


