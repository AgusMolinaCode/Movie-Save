"use client";
import { BiSearch } from "react-icons/bi";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from "next/image";
import { BiLeftArrowAlt, BiRightArrowAlt } from "react-icons/bi";
import { useState, Suspense } from "react";
import { RxCross2 } from "react-icons/rx";
import Link from "next/link";
import { AiOutlineHeart } from "react-icons/ai";
import FavoriteButton from "../UI/FavoriteButton";

// Generated by https://quicktype.io

export interface SearchData {
  page: number;
  results: Result[];
  total_pages: number;
  total_results: number;
}

export interface Result {
  adult: boolean;
  backdrop_path: null | string;
  genre_ids: number[];
  id: number;
  original_language: string;
  original_title: string;
  overview: string;
  popularity: number;
  poster_path: string;
  release_date: string;
  title: string;
  video: boolean;
  vote_average: number;
  vote_count: number;
}

const Search = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isSearchEnabled, setIsSearchEnabled] = useState(false);
  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [resultsPerPage, setResultsPerPage] = useState(5);

  const options = {
    method: "GET",
    headers: {
      accept: "application/json",
      Authorization:process.env.NEXT_PUBLIC_MOVIE_KEY
    },
  };

  const { data, isError, isFetching } = useQuery(
    ["searchData", searchTerm],
    async () => {
      if (searchTerm) {
        const { data } = await axios.get(
          `https://api.themoviedb.org/3/search/movie?query=${searchTerm}&include_adult=false`,
          options
        );     
        const sortedData = data.results.sort(
          (a: Result, b: Result) => b.popularity - a.popularity
        );
        const limitedData = sortedData.slice(0, 15);
        return { ...data, results: limitedData } as SearchData;
      }
    },
    {
      enabled: isSearchEnabled,
    }
  );

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setSearchTerm(searchTerm.trim());
    setIsSearchEnabled(true);
    setCurrentPage(1); // Restablecer la página actual a 1 cuando se realiza una nueva búsqueda
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    setSearchTerm(value);

    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    const newTimeoutId = setTimeout(() => {
      setIsSearchEnabled(true);
    }, 3000);
    setTimeoutId(newTimeoutId);

    // Verificar si no hay resultados previos y establecer la página actual en 1 si el valor del input cambia
    if (!data) {
      setCurrentPage(1);
    }
  };

  const handleReset = () => {
    setSearchTerm("");
    setIsSearchEnabled(false);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => prevPage - 1); // Restar 1 a la página actual
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const totalPages = Math.ceil((data?.total_results ?? 0) / resultsPerPage); // Calcular el número total de páginas
  const isPrevButtonDisabled = currentPage === 1;
  const isNextButtonDisabled = currentPage === 3;

  const startIndex = (currentPage - 1) * resultsPerPage; // Calcular el índice de inicio de los resultados de la página actual
  const endIndex = startIndex + resultsPerPage; // Calcular el índice final de los resultados de la página actual
  const resultsToShow = data?.results.slice(startIndex, endIndex); // Obtener los resultados de la página actual utilizando la función slice

  return (
    <div className="">
      <form className="pl-2 md:pl-16 items-center" onSubmit={handleSubmit}>
        <div className="flex justify-start relative items-center gap-2">
          <input
            type="text"
            placeholder=" Title movie"
            className="text-white bg-transparent border-[1px] rounded-xl text-md w-[220px] p-1 focus:border-[1px] outline-none"
            value={searchTerm}
            onChange={handleInputChange}
          />
          <button type="submit">
            <BiSearch className="text-white text-2xl cursor-pointer " />
          </button>
          {searchTerm && (
            <button type="button" onClick={handleReset}>
              <RxCross2 className="text-white absolute left-48 top-[0.28rem] bg-red-500 rounded-full text-2xl cursor-pointer" />
            </button>
          )}
        </div>
      </form>

      <div className={`min-h-[340px] ${searchTerm ? "" : "hidden"}`}>
        {data && (
          <div>
            {isFetching && (
              <div className="flex justify-center mt-20 bg-zinc-950 align-middle items-center mx-auto">
                <h1 className="text-white text-4xl font-bold flex items-center justify-center">
                  Loading...
                </h1>
              </div>
            )}

            <div className="flex flex-wrap gap-4 mt-4 justify-center items-center content-center mx-auto">
              {resultsToShow?.map((movie) => (
                <div key={movie.id} className="relative h-full w-[170px]">
                  <Link href={`/movie/${movie.id}`}>
                    <Suspense fallback={<Loading />}>
                      {movie.poster_path === null ? (
                        <Image
                          src="/no-image.png"
                          alt="No image available"
                          width={500}
                          height={500}
                          layout="responsive"
                          className="rounded-xl"
                        />
                      ) : (
                        <Image
                          src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
                          alt={movie.original_title}
                          width={200}
                          height={200}
                          layout="responsive"
                          className="rounded-xl"
                        />
                      )}
                    </Suspense>

                    <div
                      className="absolute inset-0 rounded-xl flex items-end justify-center"
                      style={{
                        backgroundImage:
                          "linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1.8))",
                      }}
                    >
                      <h1 className="text-white text-center text-lg font-bold">
                        {movie.original_title}
                      </h1>
                    </div>
                  </Link>
                </div>
              ))}
            </div>
            <div className="flex justify-center  items-end mt-4">
              <button
                type="button"
                onClick={handlePrevPage}
                disabled={isPrevButtonDisabled}
              >
                <BiLeftArrowAlt
                  className={` text-2xl cursor-pointer ${
                    currentPage === 1 ? "text-gray-700" : "text-white"
                  }`}
                />
              </button>
              <span className="mx-4 text-white text-xl">{`Page ${currentPage}`}</span>
              <button
                type="button"
                onClick={handleNextPage}
                disabled={isNextButtonDisabled}
              >
                <BiRightArrowAlt
                  className={` text-2xl cursor-pointer ${
                    currentPage === totalPages || currentPage === 3
                      ? "text-gray-700"
                      : "text-white"
                  }`}
                />
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Search;

const Loading = () => {
  return (
    <div className="flex justify-center bg-zinc-950 min-h-screen items-center mx-auto">
      <h1 className="text-white text-4xl font-bold absolute inset-0 flex items-center justify-center">
        Loading...
      </h1>
    </div>
  );
};
